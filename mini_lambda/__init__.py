from mini_lambda.base import FunctionDefinitionError, evaluate, get_repr

# this one only exports one private class, no need
# from mini_lambda.generated_magic import *

from mini_lambda.main import _, L, F, C, Not, And, Or, Format, Get, In, Slice, InputVar, Constant, \
    make_lambda_friendly, make_lambda_friendly_method, make_lambda_friendly_class, as_function, is_mini_lambda_expr

try:
    # Distribution mode : import from _version.py generated by setuptools_scm during release
    from ._version import version as __version__
except ImportError:
    # Source mode : use setuptools_scm to get the current version from src using git
    from setuptools_scm import get_version as _gv
    from os import path as _path
    __version__ = _gv(_path.join(_path.dirname(__file__), _path.pardir))


__all__ = [
    '__version__',
    # submodules
    'base', 'generated_magic_replacements', 'main', 'symbols', 'vars',  # generated_magic
    # symbols
    'FunctionDefinitionError', 'evaluate', 'get_repr',
    '_', 'L', 'F', 'C', 'InputVar', 'Constant', 'make_lambda_friendly', 'make_lambda_friendly_method',
    'make_lambda_friendly_class', 'as_function', 'is_mini_lambda_expr',
    'Not', 'And', 'Or', 'Format', 'Get', 'In', 'Slice',
]

# for these two ones we can, there is a `__all__` inside
from mini_lambda.vars import *
from mini_lambda.vars import __all__ as vall

from mini_lambda.generated_magic_replacements import *
from mini_lambda.generated_magic_replacements import __all__ as gall

from mini_lambda.symbols import *
from mini_lambda.symbols import __all__ as sall

__all__ = __all__ + vall + gall + sall
